%matplotlib inline

import random
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from time import sleep
from fbprophet import Prophet
from bayes_opt import BayesianOptimization

import warnings; 
warnings.simplefilter("ignore", RuntimeWarning)

random.seed(42)
np.random.seed(42)
%matplotlib inline

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from time import sleep
from fbprophet import Prophet
from bayes_opt import BayesianOptimization

# silence scipy/optimize/_numdiff.py:519: RuntimeWarnings
import warnings; 
warnings.simplefilter("ignore", RuntimeWarning)

# silence prophet INFO messages
import logging
logging.getLogger('fbprophet').setLevel(logging.WARNING)

import random
random.seed(42)
np.random.seed(42)
df = pd.read_csv("../data/CamUKWeather.csv", parse_dates=True)
print("Shape:")
print(df.shape)
print("\nInfo:")
print(df.info())
print("\nSummary stats:")
display(df.describe())
print("\nRaw data:")
df
threshold = 2019
df_test  = df[df['year'] >= threshold]
df_train = df[df['year'] <  threshold]
m = Prophet(growth='flat',
            daily_seasonality=True,
            weekly_seasonality=False,
            yearly_seasonality=2)
m.fit(df_train);
forecast = m.predict(df_test)
pd.concat([forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail().reset_index(drop=True), 
           df_test['y'].tail().reset_index(drop=True)], axis=1)
forecast = m.predict(df_test)
pd.concat([forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail().reset_index(drop=True), 
           df_test['y'].tail().reset_index(drop=True)], axis=1)
fig1 = m.plot(forecast)
fig2 = m.plot_components(forecast)
from fbprophet.diagnostics import cross_validation, performance_metrics
m = Prophet(growth='flat',
            daily_seasonality=True,
            weekly_seasonality=False,
            yearly_seasonality=2)
m.fit(df)

df_cv = cross_validation(m,                                                  
                         initial='90000 hours',
                         period='1000 hours',
                         horizon='1 hours')
df_cv
%matplotlib inline

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from time import sleep
from fbprophet import Prophet
from fbprophet.diagnostics import cross_validation, performance_metrics
from bayes_opt import BayesianOptimization

# silence scipy/optimize/_numdiff.py:519: RuntimeWarnings
import warnings; 
warnings.simplefilter("ignore", RuntimeWarning)

# silence prophet INFO messages
import logging
logging.getLogger('fbprophet').setLevel(logging.WARNING)

import random
random.seed(42)
np.random.seed(42)
df_p = performance_metrics(df_cv)
df_p[['horizon','rmse','mae','mape']]
def prophet_f(daily_prior, yearly_prior, hum_prior, dp_prior, metric='rmse', period='1000 hours'):
    """
    Implements the prophet model to be optimised and performs cross-validation
    
    Args:
        daily_prior:  daily seasonality prior scale
        yearly_prior: yearly seasonality prior scale
        hum_prior:    humidity regressor prior scale 
        dp_prior:     dew.point regressor prior scale

    Returns:
        negative of root mean square error
    """
                     
    m = Prophet(growth='flat',
                weekly_seasonality=False)
    
    m.add_seasonality(name='daily',
                      period=1,
                      fourier_order=2,
                      mode='multiplicative',
                      prior_scale=10 ** daily_prior)
    m.add_seasonality(name='yearly',
                      period=365.25,
                      fourier_order=2,
                      mode='additive',
                      prior_scale=10 ** yearly_prior)
    
    m.add_regressor('humidity',
                    mode='multiplicative',
                    prior_scale=10 ** hum_prior)
    m.add_regressor('dew.point',
                    mode='multiplicative',
                    prior_scale=10 ** dp_prior)
    
    #m.fit(df)
    df_cv = cross_validation(m,                                                  
                             initial='90000 hours',
                             period=period,
                             horizon='1 hours')
    
    if metric == 'rmse':
        df_cv_rmse = ((df_cv.y - df_cv.yhat) ** 2).mean() ** .5
        return - df_cv_rmse
    else:
        df_p = performance_metrics(df_cv)
        return m, df_p[['horizon','rmse','mae','mape']]
# daily_prior_scale calculated as 10 ** daily_prior in prophet_f
pbounds = {'daily_prior': (-2, 2), 'yearly_prior': (-2, 2),
           'hum_prior':   (-2, 2), 'dp_prior':     (-2, 2)}

optimizer = BayesianOptimization(
    f=prophet_f,
    pbounds=pbounds,
    verbose=2,  # verbose = 1 prints only when a maximum is observed, verbose = 0 is silent
    random_state=1
)

optimizer.maximize(
    init_points=10,
    n_iter=10)

print("\nMax params:")
print(optimizer.max)
def prophet_f(daily_prior, yearly_prior, hum_prior, dp_prior, metric='rmse', period='1000 hours'):
    """
    Implements the prophet model to be optimised and performs cross-validation
    
    Args:
        daily_prior:  daily seasonality prior scale
        yearly_prior: yearly seasonality prior scale
        hum_prior:    humidity regressor prior scale 
        dp_prior:     dew.point regressor prior scale

    Returns:
        negative of root mean square error
    """
                     
    m = Prophet(growth='flat',
                weekly_seasonality=False)
    
    m.add_seasonality(name='daily',
                      period=1,
                      fourier_order=2,
                      mode='multiplicative',
                      prior_scale=10 ** daily_prior)
    m.add_seasonality(name='yearly',
                      period=365.25,
                      fourier_order=2,
                      mode='additive',
                      prior_scale=10 ** yearly_prior)
    
    m.add_regressor('humidity',
                    mode='multiplicative',
                    prior_scale=10 ** hum_prior)
    m.add_regressor('dew.point',
                    mode='multiplicative',
                    prior_scale=10 ** dp_prior)
    
    m.fit(df)
    df_cv = cross_validation(m,                                                  
                             initial='90000 hours',
                             period=period,
                             horizon='1 hours')
    
    if metric == 'rmse':
        df_cv_rmse = ((df_cv.y - df_cv.yhat) ** 2).mean() ** .5
        return - df_cv_rmse
    else:
        df_p = performance_metrics(df_cv)
        return m, df_p[['horizon','rmse','mae','mape']]
# daily_prior_scale calculated as 10 ** daily_prior in prophet_f
pbounds = {'daily_prior': (-2, 2), 'yearly_prior': (-2, 2),
           'hum_prior':   (-2, 2), 'dp_prior':     (-2, 2)}

optimizer = BayesianOptimization(
    f=prophet_f,
    pbounds=pbounds,
    verbose=2,  # verbose = 1 prints only when a maximum is observed, verbose = 0 is silent
    random_state=1
)

optimizer.maximize(
    init_points=10,
    n_iter=10)

print("\nMax params:")
print(optimizer.max)
# daily_prior_scale calculated as 10 ** daily_prior in prophet_f
pbounds_red = {'daily_prior': (-2, 2),  'yearly_prior': (2, 2),
               'hum_prior':   (-2, -2), 'dp_prior':     (-2, -2)}

optimizer.set_bounds(new_bounds = pbounds_red)

optimizer.maximize(
    init_points = 0,
    n_iter = 10)

print("\nMax params:")
print(optimizer.max)
print("Simple model:")
display(df_p[['horizon', 'rmse', 'mae', 'mape']])
m_opt, m_diags_opt = prophet_f(optimizer.max['params']['daily_prior'], 
                               optimizer.max['params']['yearly_prior'], 
                               optimizer.max['params']['hum_prior'],
                               optimizer.max['params']['dp_prior'],
                               metric = 'all',
                               period = '250 hours')

print("Bayesian optimised parameters:")
m_diags_opt
forecast_opt = m_opt.predict(df_test)
fig3 = m_opt.plot_components(forecast_opt)
notebook = "BayesOptProphetHyperparameters.ipynb"
# !jupyter nbconvert --to script {notebook}
# !jupyter nbconvert --execute --to html {notebook}
# !jupyter nbconvert --execute --to pdf {notebook}
# !jupyter nbconvert --to pdf {notebook}

%rm history.txt
%history -f history.txt

!jupyter nbconvert --to python {notebook}
sleep(5)
!jupyter nbconvert --to markdown {notebook}
sleep(5)
!jupyter nbconvert --to html {notebook}
import sys
import IPython

print("Python version:")
print(sys.executable)
print(sys.version)
print("\nIPython version:")
print(IPython.__version__)
import pkg_resources
import types

def get_imports():
    for name, val in globals().items():
        if isinstance(val, types.ModuleType):
            # Split ensures you get root package, 
            # not just imported function
            name = val.__name__.split(".")[0]

        elif isinstance(val, type):
            name = val.__module__.split(".")[0]

        # Some packages are weird and have different
        # imported names vs. system/pip names.  Unfortunately,
        # there is no systematic way to get pip names from
        # a package's imported name.  You'll have to add
        # exceptions to this list manually!
        poorly_named_packages = {
            "PIL":       "Pillow",
            "sklearn":   "scikit-learn",
            "bayes_opt": "bayesian-optimization",
        }
        if name in poorly_named_packages.keys():
            name = poorly_named_packages[name]

        yield name

imports = list(set(get_imports()))

# The only way I found to get the version of the root package
# from only the name of the package is to cross-check the names 
# of installed packages vs. imported packages
requirements = []
for m in pkg_resources.working_set:
    if m.project_name in imports and m.project_name != "pip":
        requirements.append((m.project_name, m.version))

reqs = pd.DataFrame(requirements, columns = ['name', 'version'])
print("Imported modules:")
reqs.style.hide_index()
!date
notebook = "BayesOptProphetHyperparameters.ipynb"
# !jupyter nbconvert --to script {notebook}
# !jupyter nbconvert --execute --to html {notebook}
# !jupyter nbconvert --execute --to pdf {notebook}
# !jupyter nbconvert --to pdf {notebook}

%rm history.txt
%history -f history.txt

!jupyter nbconvert --to python {notebook}
sleep(5)
!jupyter nbconvert --to markdown {notebook}
sleep(5)
!jupyter nbconvert --to html {notebook}
